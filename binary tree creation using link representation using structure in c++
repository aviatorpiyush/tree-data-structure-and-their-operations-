#include<iostream>
using namespace std;

struct node
{
    struct node *lchild;
    int data;
    struct node *rchild;
};
struct queue
{
    int size;
    int front;
    int rear;
    node **qu;
};

void create(struct queue *q,int size)
{
    q->size=size;
    q->front =q->rear=0;
    q->qu = new node * [(q->size)*sizeof(node*)];

}

void enqueue(struct queue *q,struct node *x)
{
    if((q->rear+1)%q->size==q->front)
        cout<<"queue is full";
    else
        q->rear=(q->rear+1)%q->size;
        q->qu[q->rear]=x;

}

struct node *dequeue(struct queue *q)
{
    struct node *x=nullptr;
    if(q->front==q->rear)
        cout<<"queue is empty";
    else
    {
        q->front=(q->front+1)%q->size;
        x=q->qu[q->front];
    }
    return x;
}

int isEmpty(struct queue q)
{
return q.front==q.rear;
}


struct node *root=nullptr;
void Treecreate()
{
struct node *p,*t;
int x;
struct queue q;
create(&q,100);
cout<<"Eneter root value";
cin>>x;
root= new struct node  [sizeof(struct node)];
root->data=x;
root->lchild=root->rchild=nullptr;
enqueue(&q,root);
while(!isEmpty(q))
{
p=dequeue(&q);
cout<<"eneter left child of"<<p->data;
cin>>x;
if(x!=-1)
{
t=new struct node [sizeof(struct node)];
t->data=x;
t->lchild=t->rchild=nullptr;
p->lchild=t;
enqueue(&q,t);
}
cout<<"eneter right child of"<<p->data;
cin>>x;
if(x!=-1)
{
t=new struct node [sizeof(struct node)];
t->data=x;
t->lchild=t->rchild=nullptr;
p->rchild=t;
enqueue(&q,t);
}
}
}
void Preorder(struct node *p)
{
if(p)
{
cout<<p->data<<" ";
Preorder(p->lchild);
Preorder(p->rchild);
}
}
void Inorder(struct node *p)
{
if(p)
{
Inorder(p->lchild);
cout<<p->data<<" ";
Inorder(p->rchild);
}
}
void Postorder(struct node *p)
{
if(p)
{
Postorder(p->lchild);
Postorder(p->rchild);
cout<<p->data<<" ";
}
}
int main()
{
Treecreate();
cout<<"\n";
cout<<"preorder"<<"\n";
Preorder(root);
cout<<"\n"<<"Post Order "<<endl;
Postorder(root);
cout<<endl;

cout<<"inorder"<<endl;
Inorder(root);
return 0;
}
